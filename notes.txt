[[[ Lesson 0: ]]]

javascript console commands
> console.log("hello world")
"hello world"   ##returns undefined

> document.URL
  - returns a "string" value of document url.


[[ Instructor notes/links: ]]
https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Introduction
https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model
https://docs.webplatform.org/wiki/css


[[[ Lesson 1: ]]]

javascript console commands:
> "audacity".slice(1).replace("u","U");
"Udacity"

## creating an array
> var myArray = ["hello", 1];

[[ Instructor notes/links: ]]

see here for more String methods:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String

[Falsy values]
There are only six falsy values in JavaScript so it is easiest to memorize those:

    false
    0 (zero)
    "" (empty string)
    null
    undefined
    NaN

You can learn more about some of the quirks of truthy and falsy here:
http://www.sitepoint.com/javascript-truthy-falsy/

[Arrays]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array

[Copying Arrays]
be careful when assigning an object (e.g. another array) to a var.
Any modifications (e.g push/pop operations) you do will also modify other var!
E.g:
> xs ##Array [ "hello", 5 ];
undefined
> ys = xs;
Array [ "hello", 5 ]
> ys.push(ys.pop() + 1);
2
> ys
Array [ "hello", 6 ]
> xs ## xs ALSO MODIFIED!!
Array [ "hello", 6 ]

To do a proper deep copy of xs, use slice():
> ys = xs.slice()
Array [ "hello", 6 ]
> ys
Array [ "hello", 6 ]
> ys.push(ys.pop() + 1);
2
> ys
Array [ "hello", 7 ]
> xs
Array [ "hello", 6 ]


[Strings]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split


[Javascript has no Classes]
Though JavaScript has no classes, you can mimic many of the characteristics with
its functions. You'll learn more about functions in Lesson 3 so consider this a
bit of a preview.

function Car() {}
/*
var Car = function() {}
*/
var car1 = new Car();

The new keyword allows us to create a new instance of an Object. Remember that
functions are objects. In the code above, you can think of the function Car as a
JavaScript version of a Python class definition.


[ Dot and Bracket Notation ]
http://www.dev-archive.net/articles/js-dot-notation/


[ function definition ]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function


[ Validating JSON ]
http://jsonlint.com/


[ Changing background color of html element ]
document.getElementById("education").style.backgroundColor = "black";


[ hiding an element ]
document.getElementById("education").style.display = "none";

for more info about HTMLELements, see:
https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement.style
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Properties_Reference


[ Sanitizing (Escaping special characters) text input using encodeURI() or
encodeURIComponent() ]
e.g.
var html = '<script src="http://hackyourwebsite.com/eviljavascript.js"></script>';
encodeURI(html);
> "%3Cscript%20src=%22http://hackyourwebsite.com/eviljavascript.js%22%3E%3C/script%3E"

see:
http://www.w3schools.com/jsref/jsref_encodeuri.asp
http://www.the-art-of-web.com/javascript/escape/
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent


to convert special characters to html entities, do something like this:
var d = "<div>"
d = d.replace(/<|>/g, function(chr){
    return chr == "<" ? "&lt;" : "&gt;"
})
console.log(d)

use regexp in replace()
see:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

in jquery, you can covert to html entities with this:
$('<div/>').text('This is fun & stuff').html();
// evaluates to "This is fun &amp; stuff"

see :
https://stackoverflow.com/questions/2613582/convert-tags-to-html-entities


[ :last jquery selector ]

The :last jQuery selector returns the final element in a list that matches whatever precedes it.

So for work-entry:last, if there are 3 work-entry elements, it will only return the 3rd one.

If you're interested, you can read more about jQuery's :last selector here:
http://www.w3schools.com/jquery/sel_last.asp


[ javascript Scopes ]
http://toddmotto.com/everything-you-wanted-to-know-about-javascript-scope/


[ Collecting Click Locations ]

$(document).click(function(loc){ logClicks(loc.pageX, loc.pageY) });

see http://api.jquery.com/category/events/event-object/
 
[ Return array of job locations from work object ]

work.jobs.map(function(j){ return j.location; });
> Array [ "disneyland", "Pasadena" ]

//above expression is equivalent to:

var locationArray = [];
for (job in work_obj.jobs) {
  var newLocation - work_obj.jobs[job].location;
  locationArray.push(newLocation);
}


[ Customize the Portfolio - adding googlemaps to resume ]

//append googlemap to resume
$("#mapDiv").append(googleMap);

##Instructor Notes
Important! There are two more steps required to make the map work properly.

    Uncomment the last block of code in helper.js. The code you need starts with window.addEventListener('load', initializeMap); and goes until the end of the file.
    Uncomment the <script> tag for Google Maps API in the <head> of index.html.

The reason these instructions weren't included in the video is that we didn't realize until late that these lines produce errors if you don't .append() a map to the page.
##

## Links in Instructor notes:
https://developers.google.com/maps/documentation/javascript/tutorial
http://d3js.org/
https://www.w3.org/community/webed/wiki/A_Short_History_of_JavaScript

